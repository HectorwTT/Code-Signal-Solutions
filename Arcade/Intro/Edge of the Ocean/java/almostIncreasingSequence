boolean solution(int[] sequence) {
 List<Integer> listStartingFromZero= new ArrayList<>();
 List<Integer> listStartingFromOne= new ArrayList<>();
 List<Integer> listOfNonMembersStartingFromZero=new ArrayList<>();
 List<Integer> listOfNonMembersStartingFromOne= new ArrayList<>();
 List<Integer> listOfAllStartingFromZero=new ArrayList<>();
 boolean isIncreasing= true;
 listStartingFromZero.add(sequence[0]);
 listStartingFromOne.add(sequence[1]);
 
 for(int i=1;i<sequence.length;i++){
  int number=sequence[i];
  int last= listStartingFromZero.get(listStartingFromZero.size()-1);
  if(number>last) listStartingFromZero.add(number);
  else listOfNonMembersStartingFromZero.add(number);
 }
 for(int i=2;i<sequence.length;i++){
   int number=sequence[i];
   int last = listStartingFromOne.get(listStartingFromOne.size()-1);
   if(number>last)listStartingFromOne.add(number);
   else listOfNonMembersStartingFromOne.add(number);
 }
 
  listOfAllStartingFromZero.addAll(listStartingFromZero);
  listOfAllStartingFromZero.remove(listOfAllStartingFromZero.size()-1);
  listOfAllStartingFromZero.addAll(listOfNonMembersStartingFromZero);
  int [] numsFromZero= listOfAllStartingFromZero.stream()
                            .mapToInt(Integer::intValue)
                            .toArray();
  for(int i=1;i<numsFromZero.length;i++){
    int previous=numsFromZero[i-1];
    int current= numsFromZero[i];
    if(current<=previous) {
      isIncreasing=false;
      break;
    }
  }
  return listStartingFromZero.size()== sequence.length-1
         ||(numsFromZero.length==sequence.length-1 
              && isIncreasing)
         ||(listStartingFromZero.size()==1 && listStartingFromOne.size()==sequence.length-1) ;
 }
 

