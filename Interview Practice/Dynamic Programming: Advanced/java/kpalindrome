boolean solution(String X, int k) {
 
        // 'Y' is a reverse of 'X'
        String Y = new StringBuilder(X).reverse().toString();
 
        int n = X.length();
 
        // lookup table to store solution of already computed subproblems
        int[][] T = new int[n + 1][n + 1];
 
        // fill the lookup table `T[][]` in a bottom-up manner
        for (int i = 0; i <= n; i++)
        {
            for (int j = 0; j <= n; j++)
            {
                // if either string is empty, remove all characters from the
                // other string
                if (i == 0 || j == 0) {
                    T[i][j] = i + j;
                }
 
                // ignore the last characters of both strings if they are the same
                // and process the remaining characters
                else if (X.charAt(i - 1) == Y.charAt(j - 1)) {
                    T[i][j] = T[i - 1][j - 1];
                }
 
                // if the last character of both strings is different, consider
                // minimum by removing the last character from 'X' and 'Y'
                else {
                    T[i][j] = 1 + Integer.min(T[i - 1][j], T[i][j - 1]);
                }
            }
        }
 
        return T[n][n] <= 2*k;
}
