String solution(String s) {
 Stack<Integer> indexes= new Stack<>();
 Stack<Integer>numberOfTimes= new Stack<>();
 Stack<String>nestedStrings= new Stack<>();
 String nestedsubstr="";
 String substring="";
 String encoded ="";
 int startOfNum=-1;
 for(int i=0;i<s.length();i++){
  char ch= s.charAt(i);
  if(Character.isDigit(ch)){
   if(i==0 || !Character.isDigit(s.charAt(i-1)))startOfNum=i;
   if(!indexes.isEmpty() && !substring.equals("")){
    nestedsubstr=substring;
    substring="";
   }
  }else if(ch=='['){
    int number=Integer.parseInt(s.substring(startOfNum,i));
    numberOfTimes.push(number);
    nestedStrings.push(nestedsubstr); 
    nestedsubstr="";
    indexes.push(i);
  }else if(ch==']'){
    int index= indexes.pop();
    int numOfTimes= numberOfTimes.pop();
    String nestedString= nestedStrings.pop();
    if(indexes.isEmpty()){
     String plaintext="";
     if(nestedsubstr.equals("")){
      plaintext= s.substring(index+1,i);
      substring="";
     }else{
       plaintext=nestedsubstr;
       nestedsubstr="";
      }
     String ciphertext= plaintext.repeat(numOfTimes);
     encoded+=ciphertext;
    }else{
      if(!substring.equals("")){
       nestedsubstr=nestedString+substring.repeat(numOfTimes);
       substring="";
      }else {
       System.out.println(nestedsubstr+"before");
       nestedString+=nestedsubstr.repeat(numOfTimes);
       nestedsubstr=nestedString;
      }
    }  
  }else{
    if(indexes.isEmpty())encoded+=ch;
    else{
     char previousch=s.charAt(i-1);
     if(previousch=='[')substring=""+ch;
     else if(previousch==']')nestedsubstr+=ch;
     else{
      if(!substring.equals(""))substring+=ch;
      else nestedsubstr+=ch;
     }
    }
  }
  }
  return encoded;
}
