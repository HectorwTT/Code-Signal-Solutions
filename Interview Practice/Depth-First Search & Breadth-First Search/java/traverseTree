
int[] solution(Tree<Integer> t) {
  List <Integer> list = new ArrayList<Integer>();
    if (t == null ) return new int[0];
    Queue <Tree<Integer>> queue = new LinkedList<Tree<Integer>>();
    queue.offer(t);
    while (!queue.isEmpty()){
      Tree<Integer> current = queue.poll();
      list.add(current.value);
      Optional<Tree<Integer>> leftChOptional= Optional.ofNullable(current.left);
      Optional<Tree<Integer>>rightChOptional=Optional.ofNullable(current.right);
      if(leftChOptional.isPresent()) queue.offer(leftChOptional.get());
      if(rightChOptional.isPresent())queue.offer(rightChOptional.get());
      }
    return list.stream().mapToInt(Integer::intValue).toArray();
}
