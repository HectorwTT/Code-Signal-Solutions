Tree<Integer> solution(Tree<Integer> t, int[] queries) {
 if(t==null) return t;
 int tvalue= t.value.intValue();
 for(int i=0;i<queries.length;i++){
  int value= queries[i];
  Tree<Integer> current=t;
  Tree<Integer> previous=current;;
  while(current!=null){
    int currentvalue= current.value.intValue();
    if(currentvalue==value) break;
    else if(value<currentvalue){
     previous=current;
     current=current.left; 
    }
    else{
      previous=current;
      current=current.right;
    }
  }

  if(current !=null){
    if(current==t){
      if(t.left==null && t.right==null )return null;
      else if(t.left==null) t= t.right;
      else if(t.right==null) t=t.left;
      else{
      Tree<Integer>currentptr= current.left;
      Tree<Integer>currentptrprev= null;
      while(currentptr.right!=null){
        currentptrprev=currentptr;
        currentptr=currentptr.right;
      } 
        if(currentptr==current.left){
          current.value=current.left.value;
          current.left= currentptr.left;
        }else{
          if(currentptr.left==null){
            current.value=currentptr.value;
            currentptrprev.right=null;
          }else{
            current.value=currentptr.value;
            currentptrprev.right=currentptr.left;
          }
        }
      }
    }
    else if(current.left==null && current.right==null){
      
      if(previous.left==current) previous.left=null;
      else previous.right= null;
    }else if(current.left!=null){
      Tree<Integer>currentptr= current.left;
      Tree<Integer>currentptrprev= null;
      while(currentptr.right!=null){
        currentptrprev=currentptr;
        currentptr=currentptr.right;
      } 
        if(currentptr==current.left){
          current.value=current.left.value;
          current.left= currentptr.left;
        }else{
          if(currentptr.left==null){
            current.value=currentptr.value;
            currentptrprev.right=null;
          }else{
            current.value=currentptr.value;
            currentptrprev.right=currentptr.left;
          }
        }
      }else{
        if(current.right==null){
          if(previous.left==current)previous.left=null;
          else previous.right=null;
        }else{
           current.value=current.right.value;
           current.left= current.right.left;
           current.right=current.right.right;
        }
      }
    }
    }
  
  
 return t;
}

