int solution(Tree<Integer> t, int k) {
  List<Integer> treeInOrder=inorderTraversal(t);
  for(int i=0;i<treeInOrder.size();i++){
   int number = treeInOrder.get(i);
   int position=i+1;
   if(position==k) return number;
  }
  return -1;
}
List<Integer> inorderTraversal(Tree<Integer> root) {
         if(root==null)return new ArrayList<>();
         if (root.left==null && root.right==null) {
             List<Integer> rootlist = new ArrayList<>();
             rootlist.add(root.value);
             return rootlist;
        }
        else {
            if(root.left==null){
                List <Integer> result = new ArrayList<>();
                result.add(root.value);
                List<Integer> rightlist = inorderTraversal(root.right);
                result.addAll(rightlist);
                return result;
            }
            else if (root.right==null){
                List <Integer> result = new ArrayList<>();
                List<Integer> leftlist = inorderTraversal(root.left);
                result.addAll(leftlist);
                result.add(root.value);
                return result;
            }else{
            List <Integer> leftlist=new ArrayList<>();
            List <Integer> rightlist=new ArrayList<>();
            if(root.left!=null)leftlist=inorderTraversal(root.left);  
            if (root.right!=null)
              rightlist= inorderTraversal(root.right);
            List <Integer> result = new ArrayList<>();
            result.addAll(leftlist);
            result.add(root.value);
            result.addAll(rightlist);
            return result;
            }
        } 
    }
